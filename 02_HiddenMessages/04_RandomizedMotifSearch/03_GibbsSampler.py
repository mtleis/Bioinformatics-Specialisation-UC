#GibbsSampler(Dna, k, t, N)
#        randomly select k-mers Motifs = (Motif1, …, Motift) in each string from Dna
#        BestMotifs ← Motifs
#        for j ← 1 to N
#            i ← Random(t)
#            Profile ← profile matrix constructed from all strings in Motifs except for Motifi
#            Motifi ← Profile-randomly generated k-mer in the i-th sequence
#            if Score(Motifs) < Score(BestMotifs)
#                BestMotifs ← Motifs
#        return BestMotifs
import random
Random = __import__('02_Random')
ProfileGeneratedString = __import__('04_ProfileGeneratedString')

def GibbsSampler(Dna, k, t, N):
    # print('N', N)
    # randomly select motifs from each string of Dna
    motifs = []
    for i in range(0, t):
        x = random.randint(1, len(Dna[i])-k)
        kmer = Dna[i][x: x + k]
        motifs.append(kmer)

    BestMotifs = motifs.copy()
    for j in range(1, N):
        #i = Random.Random(t-1)
        i = random.randint(0, t-1)
        #temp = motifs.copy()
        motifs.remove(motifs[i])
        profile = ProfileWithPseudocounts(motifs)
        kmeri = ProfileGeneratedString.ProfileGeneratedString(Dna[i], profile, k)
        motifs.insert(i, kmeri)
        #if motifs != BestMotifs:
        if Score(motifs) < Score(BestMotifs):
            BestMotifs = motifs.copy()
    return BestMotifs

def GibbsSamplerWithMotifs(Dna, motifs, k, t, N):
    # Start from motifs
    BestMotifs = motifs.copy()
    for j in range(1, N):
        #i = Random.Random(t-1)
        i = random.randint(0, t-1)
        #temp = motifs.copy()
        motifs.remove(motifs[i])
        profile = ProfileWithPseudocounts(motifs)
        kmeri = ProfileGeneratedString.ProfileGeneratedString(Dna[i], profile, k)
        motifs.insert(i, kmeri)
        #if motifs != BestMotifs:
        if Score(motifs) < Score(BestMotifs):
            BestMotifs = motifs.copy()
    return BestMotifs

# Input:  A set of kmers Motifs
# Output: ProfileWithPseudocounts(Motifs)
def ProfileWithPseudocounts(Motifs):
    t = len(Motifs)
    k = len(Motifs[0])
    profile = {}
    # insert your code here
    count = CountWithPseudocounts(Motifs)
    for symbol in 'ACGT':
        profile[symbol] = []

    for i in range(k):
        sum = 0
        for symbol in 'ACGT':
            sum = sum + count[symbol][i]

        for symbol in 'ACGT':
            profile[symbol].append(count[symbol][i] / sum)

    return profile

# Input:  A set of kmers Motifs
# Output: CountWithPseudocounts(Motifs)
def CountWithPseudocounts(Motifs):
    t = len(Motifs)
    k = len(Motifs[0])
    count = {}

    for symbol in "ACGT":
        count[symbol] = []
        for j in range(k):
            count[symbol].append(1)

    for i in range(t):
        for j in range(k):
            symbol = Motifs[i][j]
            count[symbol][j] += 1

    return count


# Input:  A set of k-mers Motifs
# Output: The score of these k-mers.
def Score(Motifs):
    consensus = Consensus(Motifs)
    score = 0
    for i in range(len(Motifs)):
        for k in range(len(consensus)):
            if consensus[k] != Motifs[i][k]:
                score += 1
    return score

# Input:  A set of kmers Motifs
# Output: A consensus string of Motifs.
def Consensus(Motifs):
    consensus = ""
    k = len(Motifs[0])
    count = Count(Motifs)
    for j in range(k):
        m = 0
        frequentSymbol = ""
        for symbol in "ACGT":
            if count[symbol][j] > m:
                m = count[symbol][j]
                frequentSymbol = symbol
        consensus += frequentSymbol
    return consensus

def Count(Motifs):
    count = {}
    k = len(Motifs[0])
    for symbol in "ACGT":
        count[symbol] = []
        for j in range(k):
            count[symbol].append(0)

    t = len(Motifs)
    for i in range(t):
        for j in range(k):
            symbol = Motifs[i][j]
            count[symbol][j] += 1

    return count


Dna = [
'ATTGAGTACGTATGTGTTAAGGTCCCGTCGAGAAGCTTTAGTATAACGACTGCGATACTGCTATATTTCATTATCGTAATCGGAGGTTGAAATATTTCCTGCGGTGGGCGTTTTATCACGGGTTATGTGCAAATCTGATAAAATCGTGAGAGGCTGTATTAGACATGTGCAGCAATTATCGATAGCCAGTATCTCCAGAGCTCGCTGACAACGTTATTGCGGATACTGGCAATGGATTCGGTAATAAGAGTATGTCGTTCGTAAATGATGTTCTCGGCCGAAAATCGACTGACGCCCAGCAATTGAGTACGTATGT',
'GTTAAGGTCCCGTCGAGAAGCTTTAGTATAACGACTGCGATACTGCTATATTTCATTATTTCACACGTGATTGGCGTAATCGGAGGTTGAAATATTTCCTGCGGTGGGCGTTTTATCACGGGTTATGTGCAAATCTGATAAAATCGTGAGAGGCTGTATTAGACATGTGCAGCAATTATCGATAGCCAGTATCTCCAGAGCTCGCTGACAACGTTATTGCGGATACTGGCAATGGATTCGGTAATAAGAGTATGTCGTTCGTAAATGATGTTCTCGGCCGAAAATCGACTGACGCCCAGCAATTGAGTACGTATGT',
'TAGATCGCTGAGAAATTCTTACTTCTCGGCAAGGATAAACCTATGCATCCCATAGGTACTGCCCGTACCTCATCTTACAATCGTCTTCGCAGCCGCCAGATCAGTCCCCTTAATTCGCGACCGTCAATTCACCATACAGCGGGCTAAATATCATCCTCTGCGACCATATGAGTAGGCCACTATCTTGATAAGAACTCTGGCTAGTTGGTAAATCACACAGGATCTGAGACTTTATACCCATGTATCGTTCCGGCGTGAGATGGCGGTACCGAGGGGTCAGTTGAGCGGACATCTTGCCCAGTCAGCTGTAGTGGAT',
'AGTAAGACACCGGTGCTACATAGATCCCAGCTGGGCGGAGGCACCAGCGGGGGCGTGGCGATATTGAATGCGCGTGCGCTGGACATTCAAAAAGACTCGTCCGGCGTGATTAATAGGCAGTGTGGTGGTCAGGAACGAAACATCGATTGTGCGCCGTCAGATCTACCTCTTTTCAGGCACAACACTAGCTAGTCGTCTTCGCGCTACATGCGTGCAAGGCTAGATCTACAAGTAGAACGGGGCAGTTTCCGTGGAACGTTCCACTAAACACTGTGCCCCCAATAGGCAGAATGCTCCGCCCGCTCCCGCGGACGCG',
'ACTTCCTTACGCGTCTTGGTCGTCACCAATATGGAGAGGCGGACTATATGGGAGTCCCAAGCGACGAGCTTTAAACCTGGGGGTACGTAGCTGGACATAAGCCATGTAAACACCCCCTCATAGACGTAACGGAGTATCCTGCCCCTCGCGTGAAGTGGACGCCGGCGTGATTGCGGCTGTTCATCACGCATCCCGCTGACGTCACACTGTAGACTCAGATCCAGCCGGGGGTTGTTGAAGCCGTCCAAACTCGCTTACGTAAGATCATGTATGGTGGTAGAACCAACCTACCTCAACCGCACATCTTGCCTAGACT',
'CATCGGCGCGTTCGCAACTAAGTGACGTGTGTGTAGCGCGCGCGATCCGGTCCCCCGGTTACCCTGGCCTCCTTGTAGAAGACATTGATTGACGATTAATTCGGCACTTGTTATTCCGCGTTGATTGGCCCAGGCGGACCCTATCTATCCGCGGTCAGGCTCGGTCTCATCACGGCGGCCGTTCTTCGAGTCCCATGAACAGCTAAACGTGAGTGTGAAATTGGAACGGTGAACACGTATCGTGTTTTGTAGGTTGATAATGTTTACGATAAGTTGTCGTACGAGGCAGTGGAATAACGAAATCATGTCCTATCTC',
'CAAAACCTACTTACAGTTCCTCGGTGCAACCTTCTAGGACGGCCGTCAGCCCCAAGGGAGGGTCGGCGTGGACTTCGCAACGGAATTCTTGCACACCGGAGTGGTATGCATAATGGGCACTCGTGGGTGCCGGGTCTGCCATGATTGAGTTCCGGCGCATTTGGCTTCCCCCCAGAAGGCCCATCCATTAACGAATACGATCATAACCAACCGCAGTCGCCCGTAAGAAATAGATGCAACCGGAAGGCTGCTTACAACTATTTACAAGTATGGCCAGCCTAGGCCAGTTGCGTAGATCGGTTAATTCACGTGGATG',
'ACATAGTTGGTCCTGTGCTAGGTGCTACTTGTCCAGATCCAAATAGCGGTACTCTGGGGTAAGGCTTCAACGCGACCACCGAAGCTCATGACTCGCACGTCTGGGGCCGTTCTTAGCCAGGTTCTGCGTTTAATCACCTTCCCAGCACACCAAGCCTCGACTAAGTGGAAATGCCTCGTCCTGCTACATCGCTATCGTTGCAAACTCCGCTTCACCACGTATCTCCTCCGTGTATTTCCCGCAAAATCCGTAGACTGCGTCATTCCGGCGTGGCAGGGTAGGGTAAAATCGCACGGGATAGCACACGAACACACCC',
'ACCCCATCAGCTAGTGGTCCTCCTGTTCTCACCACCAAGCCTGCTTGACTGCCACTCCTCTATGACGACGCCCGCTTCGGCTTATCTGACGCGGTTCGGCATATTGAGATCCCTGGGAGACAACGGCGCCTAGGCCTTCCTCAAAGTTATCAATGTGATCTTGTATCGCGTATAGTGCACCTCATCGATTCGAAGCAACGTCCCCGCTTACAATATACCACAGCTGAGTCGTGCAGGCGGGAGCGAACATTGAACATCATGGACCTTGATGTATAGGATTCCGATATTGAAACTTCCTTGGTGATTGGTAACGACG',
'CCTATGCCTAGGGTTCTTGTCTTCCGGAACGATTGGGGCCTGTGGTGAGGGTGTCTGACGTTGGTCCTAGTTTGCAAGCCAAAGGAAACTGCTACTCTGTGGTTTCTGGACCCCAATCGGCTACAACGATTATATGAGCCAGTGGCGGAGACCGCATCCAGAGGCATGCTTAATAATATGGTTGGTGGGAAGGGATGTCCGCGATCCTTAGGTCCAGTGACTTGGGAGTATTAGGGGGAGTATTTCGAAGTTCGCATACCTTTCATGATATCAATGCTGATCATCCGGATAGATGTAAACTGTTCCTCGAAGGTCG',
'CGTCACTGGAGGATAGGTAGATAGAGACTGGTGGAACTTTTGTTACACTCAATCAGTTCAATGCAATCGGTACGTCAGGCGTACCTCTTCCGCCATTGTTGAGGAGTCGTCTAGGGTTAAAAATTACTCGCGACGGGTCGGCGTGATTGGGCCTGCATGGTATGTTCTGTTGACTGTCATTTTCAGCCGTACGTTTCGACTAACGAGAAAGACCGAGATATAAGGAGATATAACTTAAGAAGAACCTCAGTAGAACGGTCTCGGTCCATGACGCAGGATGGAAACTTAGTACAGCCTTATAACGTCGCACTCGTCC',
'CGCGCAATCCGTACGCACGGCCTGACGGCGGTTTAATCTGTCTGCCTTTGCAGACTAAACTACGCACACCCCCCGACAGTCTTGTTATGTTGACAAACTGACACAGGCCCTCCGTACTCTAAGCCTCCCAACCGATTCAGCTGTCATACGTACTCTAGGGACTGACTTGGCCTTCTCTGGCAAAACATTATGACGAATCTGAGCCGGAGTAGCATCCGTAGGGGGACTCTGCCACTGAAAGTCCCACCGATTCCAATGTGATTGGCTGTAGAACGCCAGTTCACAGGCGGCCACCGTTACTATGTCTAAATATGTC',
'TGGATAATATCCTTAGAGATCAGTAATTCCTCTGCGTAAGACTGTGTACGCCCACACCTTCGGTGAAGATAGAGTGAGCAGTTCCCTTGTGAATTGCCACTCGTACACGGCAAATAGGTTGTGGTCGTCGCTGTTTTCCGGGTCGATTGGAAATGGAGACAGGGCCCAGATATCTTATAATGAGACTGGGTAATCGCTGGCTTCGGTTGTGAGTACCGTCGAGTCGGAGTTGAACCTCCGGGAGCGTGATTTTTTCCGTCCGGTTGTCAAATCCACACGGACCCTACGGATGGGAATGACAACCTTCATAATTTTA',
'ATGAAAGCTATGGTCGGCGTTGCGTGCATACCGTCCTACGGCCTATTTGTCTTTACAGAAACATATAGCATTCCGGTTGAGAAACCCAACGGGGGTGTATATGCTTTAAAGCGTGATTGGCTCTAACCGGGCTTAATCAACTAGTTCTTCTCTCTGCGGGATCTGGGAGTTTATTAGCCCAGTATGTACGTGACGATGCTACACGGAGGAAAAGGTTTATACCCAAGTACGCTGTTCCTCCCACTGTTAAGCGTGTCATATTGTCAAAGTAACGCCCCTCCCGTCAAGGCATCCGAGTTCCTCTTTTATCCGTGCG',
'AATTCTGTAGGGTCTCGGTAGATCCTTGCACGACTGATCAATTTTTATGTCTGAGCAACAATGCCAGAACCCGTGTTGGCGTGATTGGCCTTTTCCTCTAGGGCCAACGATCACATTCGAGCAGATTGCATTTGGCAAGGTCGAATTCGCCCAGGTCTGTTGTATTATTTTAGTACCCTTACTGGACGTGGCCTTATGTATAGAGACCTCCATAGCGTGAGTCGTAGCTCCCGGCCCACTATAGTAGACACATCTGGGCCTCGATCCTCATGCCCGGAACCTGCCTGATAAACGCGAAGGCGAAGGGAAACTTGTC',
'ACCGAGACACGGCTTGGATGCAGGCCTGACGCGTTTAGGACCGAAGGTCCGCCAATGCCCTAGATACATTACACATGCAATGCAGCTGAACGCCAACTGTCGCGTCTTTCGTCATAAGTACACGCGGCAAAACAACGTAGGTGCAGCGTGGACAACTAATGTTCCGGCCGTATTGGTGCACCGCTTCAGTTAATTCCCCAGAGGACGTCGGATACCGGAGATCGCGCAATTAACTGAAGACCCGAGCCTGAGCCAATATACGAATACAGGATTGGCGATATACCGGACCCCATTATGGGGACTCGATGGAGTATAA',
'TCGAACGAAAACATGCAATACCTTTCCGCGGTTCCGGCGTGATACCACAGCGCTAAGGTTGAGAATTAAACTCTTCAACCCGACAGCCATGCCCGCTGTCCGTTACCCCCCCAGAACTGTTTGAGTCCTTGCCTTACGTATGGGCATAACCTCCGTTGGCTTCGCCAACCTTTAACTTTGCTTAGAAGAAATGTCTGCGTGCACAGACTGCTATAACATCGGGGACCCCTAATCATAGCAGGCGGATGCCTGTTCGTGAAATTGAGGGTGCGAGACGCGTACGACGCGCGCCACCGGCATGCTAATTTTAACATAA',
'ATGTGATGCTTAGCCTAGCAGTTCCATGGCGGTCTGTTTATCATAAGCCCTTGCTGGCGAATTGGGTGAAATTTGAGAGGCCGACTGTTCCATGCCTATTCCGCTATGATTGGAAACACGACGTGCAGGTGTATCGCTCATATGACGTTCTGAGGTGCCTCACTGGGAGGACGCGACGTTAAAATTTAATGTACCGCCATTACTCCTATCGAGAAATACCTTTAGGCTCCTGCATGCTGACCTTTATCCATTTTGTGGAGCGGATGGCGCCGCCATCTTCGCAGGGTAATCAGATGCGAACAAGATTGTGTCTAAC',
'GCCCTCCACGGACCTTTGCGTTGGACACAATTCAAAAGAAATGGGAAGGCTTTGAAGTTGCTCTGGCTGTGCCAGAAGTGTAGTTCATCGTGTACATGAGAAGAAGCACACAAATTCCGGCGTAGGTGGACTTCCTCGGGAACCACCAGACTGCATCGTGAACCGGTGCAAACGACGGATTGTCGCATAGAAAGGAGCAAGAATCTCGTCCACCGTAGTCACTGTTAGGCAACACGCGATAATGATTGCCATCGCAGCTCTGGGTTTGCTGGGCTCGGTATGGTACTAGGTTTGGAGGTCTTGGGTTGCGAATGAT',
'CACGGCTGTGTTCGAACCTGCTGCTATTGCGTAAGTCTTCACGTCAACCGTTCCTAACAAACCGCTAATAGCGTTCAGGACTACTACTGGGAATTGCGGGGGATACCGGGCGGTCGGGATAACTTTCAGGGACCCACCATCATTCCCTGCCCGGCGAATGGGAGGACTAGGCGGAGATGTTTCTGCCGACAGATCCTCCACTAACGCTTCAATCGTGATTGGGCAAAAGATCGACCGAGGCCCCCGGAGTACGTGACGGTATGAGTTACGACGCCCCAGCATTTGCGGGTATGAACATCAATCGCGCCGGCACTGC' ]
k = 15
t = 20
N = 2000

#res = GibbsSampler(Dna, k, t, N)
#print('Score: ', Score(res))
#print('Result: ', *res, sep='\n')

#if __name__ == "__main__":
#    k, t, N = [int(a) for a in input().strip().split(" ")]
#    Dna = []
#    for _ in range(t):
#        Dna.append(input())
#
#    BestMotifs = GibbsSampler(Dna, k, t, N)
#    for i in range(0, 1000):
#        motifs = GibbsSampler(Dna, k, t, N)
#        if Score(BestMotifs) > Score(motifs):
#            BestMotifs = motifs
##
#    ans = BestMotifs
#    for a in ans:
#        if a != '':
#            print(a)

Dna = [
'CGCCCCTCTCGGGGGTGTTCAGTAAACGGCCA',
'GGGCGAGGTATGTGTAAGTGCCAAGGTGCCAG',
'TAGTACCGAGACCGAAAGAAGTATACAGGCGT',
'TAGATCAAGTTTCAGGTGCACGTCGGTGAACC',
'AATCCACCAGCTCCACGTGCAATGTTGGCCTA' ]
k = 8
t = 5
N = 100
ans = GibbsSampler(Dna, k,t,N)

for a in ans:
    if a != '':
        print(a)
