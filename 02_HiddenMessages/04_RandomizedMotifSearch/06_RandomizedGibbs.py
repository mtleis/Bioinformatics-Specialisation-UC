# Some learners mentioned that they implemeneted a combination of
# randomized algorithm and GibbsSampler, This also is my try
RN = __import__('01_RandomizedMotifSearch')
GB = __import__('03_GibbsSampler')

def comboSearch(Dna, k, rand, gibs):
    t = len(Dna)
    BestMotifs = RN.RandomizedMotifSearch(Dna, k, t)
    for i in range(rand):
        motifs = RN.RandomizedMotifSearch(Dna, k, t)
        if RN.Score(motifs) < RN.Score(BestMotifs):
            BestMotifs = motifs.copy()
    print('Score of Rand:', GB.Score(BestMotifs))
    # Starting from BestMotifs found by Randomized, apply Gibbs
    res = GB.GibbsSamplerWithMotifs(Dna, BestMotifs, k, t, gibs)
    print('Score of Gibs:', GB.Score(res))



Dna = [
'GAATGTGGAACCTAATCTTCCTCCCTAACGAACTGTGCGGAGAGGAGTTGTAGCAGTTCAAATAAGCCGAAGTATCGTCGAATGCTATAATCGTCCAGAGTCAACATGGGCTCGTGTTACTAGCTGTGCCTAATTTCTGTCCAAGAGGGTCCCTGG',
'GTCTTAACGGATGCGGAGCGTCGAACGACCTCCCGTAGTGTTGAAGTGTTCCCTAGCACTTATGAAGACAATGTGCTACCCGTGCCCTTGAAGCGAATTCCAACGTACCCTAAGTGGCGGATTGGACGAGCTACATCGGCGTAGACACCTGCTTTG',
'CTCATTAACTTCCGAGTTAGCCCAGCGGAGGGTCGTGACGAGCGTTATAACGTCCTGGCGCTCCGCCAAGCTCTGTGGGACGAACTTATCAAGTTCGCGGGGCCGTGCACTAACGTTTCCAGCTGGTACATATCTAAGGTTGATCGCCTGCCTGCG',
'CTTTTCATTGGCCTTCAATACTACGCGGAGGGCGGGGCCCAGCCGCTGAGCTCCCGGTTGAGACTGCACTGGTATTGGTTCCAGACGGGGTATGACGGGCACCCTCAAGTTCGAGGATCAGAACCAAGCGCCGGGGGGTAGGCCTCGTAACTAAAT',
'TGATCTAACAGCTAGACATGTTAGGCGGAGCGACGTGGCATTGAGGAGAACGTCTCAGGGGCTAGGACTTGGTCAGACACTGGGGTCTCTGCCTCATCTATTTAGTAAATTGTCAGGGCAAAGCTATGGAAAAGCCATCTATACCCCTTAGCGCGG',
'CCGCGACAGGTGCAGCCTCGTACCGAACCGCCTCTGGGGCACCCCACTCGCGAAGATTCCACAAGTTGATTCACCCTTGAAGTTTCGAAGCTGGGTGAACCAGAAGCAGCGGAGAGAGGAACGGCCAGAGCAAGGTCGACCATTGATTCGCGACCC',
'GTGGTTTCACCTACAGTCACCGAGTCGTTGTAGCGCACTTCTGCATAAATTACGTTGCCACCGTGTCGTGCTACCCTATTTTTATTGTATACGACACTACCATCGCAGACCTAAGAGTGCTGGCAGTTGAACGCGGAGCGGAGACCTGGTAACTCT',
'TACTACGGATTCTTCTGAGTGCCCTCTATTTGCGATGCAATTATCACCGTCTACCGTTGTGCGGAGTGTAGGCGACGATTGTTCACGTTACTGGGATGCACTAACTCTTCACGCGACTCGGTCGGTTTTGCGGAGGAGAGGCGGATAACGAATGCT',
'CTGACAAAATCGGCGGAGGGTGGCGGCGTCTCTCTGTACGGCGGGAGAGAGTGACAACCCATAAATTACATTCTGCCAATAAGATGTTTATCTAAGCGCAACAGTCTAGGGTCGGAGTCGAAAGAGAACTGGCGTTCGGCATGGAGAATGGACTAC',
'TTACTGGGAGCATCCCGAGCAGTTGCGTCAAGGAACCGCTACATATTTGCCCTTGCACACCGTAATCTTTAGGTCTCGGACTCGAAAATTGCCCTTTGCCGCAATGAAGCGGAGGGTCGGAACGCAGGGGGATTGTAAAGATTGAATAACCGGGGG',
'TAGTTACATAGCGGTTTATCAAGGCAGTAGCTTTTCGCGGAGGGTTGTCCGAGTGTAAGTAGTTTCGAAGGGCGGTACAGGTGAGACTCATGATTCGTCGCAATTGGAGCGCCCTGACGTCGATGCCTCAGTACTTTTATCGACCCAAGTTCTAGG',
'CCGCATCTCAGCCAAATCTGATGGACAAGGCACGGGATCCAGTCATAGATACAGGGCCCTCGGTGCATTGGGGCGGAGTGCCGAGACTCATGTCCGACGGTAACCATGCACAGGCCAGGAAGCGACGGCCATTCAACAGCTAGTCACCCCTCATAA',
'ATTCCATCCGGCTCGATGCCCTTACGGCGTTCGAAACGCGTCGTATAGCTCCCAATCGTAAAATTTGATATCTGTAGTGTATTTGCGGAGTGCGGATATGGATCTGTTCCTTGAGAAATACAAACTAACAACAGCGTTGTGCTGTATTCTATATCA',
'TCCGTAGTAGCGGACAATGCTCGTGCAATTAATTGGGCGGAGAGTAGGCCCTCACGAGCGGATTCACTTGCCGTCTCTGGATAAGCCTAGACCGGTATTCCTGTGTGCAATAGATGTAGAAATCTTGGGACAAAAAAGTTGTGGACCATATGCGAG',
'CACACGCACCGGCGTCCGAGAACCCGTACGACTGACCGATTTCCGCTCAGAAGCTACCCCGCGGAGCGAAGTGAGATGCTCTCTAGTACGCTTGAGTTAAGGGTGTGGTGTGGAAATTCAGCTGTTAATATAGCCGGATTCTCGCTGGTTCAGAGT',
'GTGGCTGATATATGAATCTGTAGGATAATGGGCCCAAAAACAAGCCCCTACTAAACGAGAGCGGAGGGAAGGTTACCAACGAGTCTCAGTGTTAGGACCCTCGGTCTGATGGGCACGAACGCAATAACATTCCAGTTACGCCGAATGTTGTTTCTT',
'TGTGGCTCTAACGGTGCCCGTCCCGGGAAACGGCGGTGTTGCGGGTTCACTCGACTTCATGCGGAGAGGAGTGGCATTAGCACAGTGGGGTGAGTAATCTGAGCCAGGTCCGTCGTTCGTGGCACAACACCTACGACGACTCACCGGGTCCGCCAT',
'ATGAGTGCTATTGCGGAGGGTGGTCCTAACTCAGGAAGCAGTGAGCCGATGCGTTGCACTTCAGCTAATAAAAACCAAATGCGCTTTTCAAACAACGACAAGAGGCTCGTCAACGAAGTAAAGATGCGGGAGAGATCTGATTGCTTATATTTGGTG',
'TATGTGCCTCACGACGATTCTACCGACTGAACAGTACTGCATGCGTAGTGACTCAGCCGCATATTACCTCTAAGGAATAGTCAGGCGGAGAGAAGATGCTACGTATGCATACGATGTCGGCATCGACATGCTGAGGTCGGTGTATGCAAAATTGTT',
'CGGATTGTTGAGAAAGGAACGAATGCGGAGCGTGGAGGGAGCGAGACCGAGACTATCCTCTGGTCGCATAAATTCCTGGGGTTATAGTTCCCGGGCCCCGTTTGATTGAGGGCAGGGCTATTGCGGCCCCACAGATTTCTGGCTACTCCGAACGCT',
'GCAGATCACCTCATTTAAGTAAGTTTGACGGCTATCACCCACCCCGTATGACGTGCATATCGCATCCTATGGCATTGCTACTCTTTTTCAACTGGTCAGCTAACAGCCCGAACTCGCTATGCGGAGCGGTGTGTATCGTACAAATGGAACGCTACT',
'CTCTGATGTGCCATTTTCCGCCAGTCATACTTCCAGCCATTTTACATTCCGAACGAGAGTGCGGAGTGGGGGCTTCTGGGTTGCTCTATGACTTATACCTTGCCCGTACTCCTGGCGATACCCGTACCGCGGCTTGCCTTAAATAGCGTCCTGGAT',
'ACGAACTGACGTGCGGAGTGATGCACCCACCTGCTGAATGTCAGTTGCATAGTGTGTAGAATGTACTCAAGCCTCTAATCAGTGCGCCTTTGAATGAATGTCTCTTACAGCGAATACTCAGTGATCACTATCAGGTGTAGAACGTGGTGCTCAATT',
'GTACAGATGCCTAGCGGCACTAAGGTGGGGCCTGGGACATGAAAAAACTGGCGTCCATTGGCAACTTAATGATACCGGGATGTTGCTGTTTAATATATATGGTGTCGCGCGGAGCGGTGCTTGGCCTTCATGGGTAGTTCGTCTCACGAGTGCGTG',
'GTCTAGGTTGGCAGATTAGGTAGCTGCAGTTCCCAGTTGGCGGTACAAGCGACGGTAGCGGCGGAGGGATGTGAGAAGATTGACTAACAAAGCTCTAGGAAGGAACTAAGGACTTGCAACGCGTCTTGACTTCATATCGAGGTACCCGGACCCAGC' ]
k = 12
N = 2000

res = comboSearch(Dna, 4, 1, 5000)
