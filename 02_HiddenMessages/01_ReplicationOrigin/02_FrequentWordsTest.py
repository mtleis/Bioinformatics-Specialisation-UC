import unittest
FrequentWords = __import__('02_FrequentWords')

class FirstCase(unittest.TestCase):
    def test_FrequentWords(self):
        input = 'ACGTTGCATGTCGCATGATGCATGAGAGCT'
        k = 4
        self.assertEqual(set(FrequentWords.FrequentWords(input,k)), set(['CATG', 'GCAT']) )

    def test_DataTest1(self):
        input = 'TGGTAGCGACGTTGGTCCCGCCGCTTGAGAATCTGGATGAACATAAGCTCCCACTTGGCTTATTCAGAGAACTGGTCAACACTTGTCTCTCCCAGCCAGGTCTGACCACCGGGCAACTTTTAGAGCACTATCGTGGTACAAATAATGCTGCCA'
        k = 3
        self.assertEqual(set(FrequentWords.FrequentWords(input,k)), set(['TGG']) )

    # test if you count the first k-mer
    def test_DataTest2(self):
        input = 'TGGTAGCGACGTTGGTCCCGCCGCTTGAGAATCTGGATGAACATAAGCTCCCACTTGGCTTATTCAGAGAACTGGTCAACACTTGTCTCTCCCAGCCAGGTCTGACCACCGGGCAACTTTTAGAGCACTATCGTGGTACAAATAATGCTGCCA'
        k = 3
        self.assertEqual(set(FrequentWords.FrequentWords(input,k)), set(['TGG']) )

    # test if you count the last k-mer
    def test_DataTest2(self):
        input = 'CAGTGGCAGATGACATTTTGCTGGTCGACTGGTTACAACAACGCCTGGGGCTTTTGAGCAACGAGACTTTTCAATGTTGCACCGTTTGCTGCATGATATTGAAAACAATATCACCAAATAAATAACGCCTTAGTAAGTAGCTTTT'
        k = 4
        self.assertEqual(set(FrequentWords.FrequentWords(input,k)), set(['TTTT']) )

    # test if overlapping is accounted for
    def test_DataTest3(self):
        input = 'ATACAATTACAGTCTGGAACCGGATGAACTGGCCGCAGGTTAACAACAGAGTTGCCAGGCACTGCCGCTGACCAGCAACAACAACAATGACTTTGACGCGAAGGGGATGGCATGAGCGAACTGATCGTCAGCCGTCAGCAACGAGTATTGTTGCTGACCCTTAACAATCCCGCCGCACGTAATGCGCTAACTAATGCCCTGCTG'
        k = 5
        self.assertEqual(set(FrequentWords.FrequentWords(input, k)), set(['AACAA']))

    # test if ties is handled
    def test_DataTest4(self):
        input = 'CCAGCGGGGGTTGATGCTCTGGGGGTCACAAGATTGCATTTTTATGGGGTTGCAAAAATGTTTTTTACGGCAGATTCATTTAAAATGCCCACTGGCTGGAGACATAGCCCGGATGCGCGTCTTTTACAACGTATTGCGGGGTAAAATCGTAGATGTTTTAAAATAGGCGTAA'
        k = 5
        self.assertEqual(set(FrequentWords.FrequentWords(input, k)), set(['AAAAT', 'GGGGT', 'TTTTA']))


    # Code Challenge Test
#    def test_DataTest4(self):
#        input = 'ACGTCGGCAAGCACGACAGCACGACCAAGATCCCAAGATCCACGTCGGCATCAGTCGTAGCACGACAGCACGACATGATCGAAATGATCGAAAGCACGACTCAGTCGTAGCACGACTCAGTCGTCAAGATCCATGATCGAAATGATCGAAAGCACGACTCAGTCGTCAAGATCCTCAGTCGTAGCACGACCAAGATCCAGCACGACTCAGTCGTATGATCGAAAGCACGACAGCACGACTCAGTCGTCAAGATCCCAAGATCCATGATCGAAACGTCGGCAAGCACGACAGCACGACTCAGTCGTACGTCGGCAAGCACGACCAAGATCCAGCACGACATGATCGAAAGCACGACACGTCGGCAAGCACGACATGATCGAACAAGATCCACGTCGGCAAGCACGACATGATCGAAATGATCGAAAGCACGACTCAGTCGTTCAGTCGTACGTCGGCAAGCACGACATGATCGAAAGCACGACACGTCGGCAACGTCGGCACAAGATCCTCAGTCGTAGCACGACAGCACGACTCAGTCGTAGCACGACAGCACGACACGTCGGCACAAGATCCTCAGTCGTATGATCGAAAGCACGACTCAGTCGTAGCACGACAGCACGACAGCACGACCAAGATCCCAAGATCCAGCACGACTCAGTCGTAGCACGACATGATCGAAACGTCGGCACAAGATCCACGTCGGCATCAGTCGTTCAGTCGTCAAGATCCTCAGTCGTACGTCGGCACAAGATCCAGCACGACCAAGATCCACGTCGGCATCAGTCGTATGATCGAAACGTCGGCAACGTCGGCAAGCACGACAGCACGACACGTCGGCAATGATCGAA'
#        k = 13
#        self.assertEqual(set(FrequentWords.FrequentWords(input, k)), set(['AAAAT', 'GGGGT', 'TTTTA']))

if __name__ == '__main__':
    unittest.main()
