#DistanceBetweenPatternAndStrings(Pattern, Dna)
#    k ← |Pattern|
#    distance ← 0
#    for each string Text in Dna
#        HammingDistance ← ∞
#        for each k-mer Pattern’ in Text
#            if HammingDistance > HammingDistance(Pattern, Pattern’)
#                HammingDistance ← HammingDistance(Pattern, Pattern’)
#        distance ← distance + HammingDistance
#    return distance
import sys
sys.path.insert(0, '/Users/tleis/PycharmProjects/BioInformaticsI/02_HiddenMessages/02_ReplicationOriginSkew')
HD = __import__('03_HammingDistance')

def DistanceBetweenPatternAndStrings(Pattern, Dna):
    k = len(Pattern)
    distance = 0
    for i in range(0, len(Dna)):
        Text = Dna[i]
        HammingDistance = sys.maxsize
        for j in range(0, len(Text)-k+1):
            kmer = Text[j:j+k]
            if HammingDistance > HD.HammingDistance(Pattern, kmer):
                HammingDistance = HD.HammingDistance(Pattern, kmer)
        distance = distance + HammingDistance
    return distance

Dna = ['TTGCATCCGGAGGCACCTAGACCTAAAACCTCATTCCATATACAACGAGCAATATCTCTAGGAATTTGTAAGCCGAGTCCCATAACGAGTGCGA', 'CCCGTCCAACACATCCTCGGTTCCCAAATCGGTTAAGTGGCTCAAGGCGTGCGCTCGAGAACTTTCTACTGTGCCAAATTCCACTGTTATTTCA', 'TCGTCGGTAACGCAAGGCGCTGTCGCAAGTGGTTTCGTGATGCTAAGGCATAAAACTACCAGACTCCAGGTGCTGATAAGACGGTCGTTGGTAT', 'TTCACATAAAGTCATCTAGCTGATTAGCGGACAAGAAGACAGAGCATATTCACTTCGATATTACCCCCTCCATTGTTGAGTTATTTGCACCACT', 'TACGATGAATCCCCGCAGGAACATAACCGGAGCCGAGGACCAAAACATGGCTTTTCACTATGCGACCAACTGGCTGAGACGACACGCCCCGGGC', 'TTTAGTTTAGGGGCAGTGCGACTGGCGTACGCCGATGCAGCCCTGATTAATCCAAAGTCTAGTGACGTGGTACAATTTGCTTGGGCTTTACTGC', 'AGTGCTTACTTTTACCTTTCCGACGTGCCTAGGCCAGAGTCAAGTTTTTATTAAACTCAAGTCCCCAGATTCGCCAACGCAGAACTTGTTGGCG', 'GCGGCGCTCCTAGAGACCTAAGACATCAACCCTATTTCGTCGATACAGACCAACTTTTATTGTAGGGCGGTGACGTGATAAAACAAGGTTTGCA', 'CATATGGTGGTTTTACTGTATGGCGCATACTCCGAATCCTGCACCGCGGCAAGAGAAAAGCAGGTTACAGTTCATCCTAGTTTAGGCGAAACGT', 'GAAAAGTAAACCATATGACTCGCTGTTATCGGGCACATCCCGCACCAATTCCTGCTCAACCAGCCTCATGCCTACTAAGATAGTGCCTTGCCTG', 'TTAGGCTTGGGATGGCGTAGCAATAGCCCCTCCCGACTTGTTCAGCCGTTATTAGCCACTTATTGTCATAGCACATCCTCACTCCTCTATTGCC', 'GATTTTGATGTGATTACGACGATAAGACGCGTTCGAAACTATAAACCGGCGGGAAACTTATGTTATACTCGGTAAGCCGGAGGTAGATTTCCGA', 'ATTCTTGGGGTGTGCACCCCGGGGGTAGGGGACCCAAGGGATAGATTTAAGCTGCTAGCTCGACTGTTCCTCAGATAACCCCAATCAGTTACCG', 'CATCTATGCTTTAAAGTATCATGGGAACTCTGACCTTGCACTTTATCCGGTAGGTACTAATATAGTCAATGTGCTGGGTTGAGCCACATCATGT', 'GTGCCGATCTACAGTATAAAGCTACGTGAGGTCCCGTACAGCCTAGCCCACCGATGCCTCTGAGGTGACTATAACAGGGATCTGGGGAGTCATT', 'TATAATATATGGTACCAAGTTCCTAAATCTTAATTCGTTCATATGGGTGCCACGGGCCTCTTCCCAGTAGCGTCTTGCAAACAGCGCCCCCCCC', 'GGGACTCAGATGCGCCCCCCAAGTGCCGGGCACCGATCCGGCACTAGCACTATACTTTCCCTTTGCCCTAACATCGACGAGAAATTAACCTCTT', 'GTACAAGCCTCGTACACCGTCGAACACGGTCAATTTTCTCCGAACAAGCTTTGCCGCTATCCTCTTCATTGGAATGTAAGACGTCATCAAGTGC', 'CTCTTGCCGTAGTCGGTACGAGAGAATTGGGTTGCTCCAGTGCGCTTCACCACGCAGAGAGACACCACCAGGGTGATGACCTACGACATTGGTG', 'TATTCTATCTTGTCAATCGTGTCCCGCATGGCAGGCCTATATCCTCCGAGCAGGCACACGTGGTTTGACAGAGACCACATCTTGATGGATGCAG', 'AATAGATGCATGGAAACGAATGCAATGAGCTAGGGTGCCCCACGATAACTGCCGATCCGCGAATCTACTCCATAGGAAAATACCGGCATCATAT', 'CTGTATTGAATAAGCCTGATCGCTATGAAGGTTAAGTGCTGGGAATGCATTTCTAGATTCGAATGACGTAACTTCAGAAGATGTCCCATATACC', 'CGGCCGGCTGGCATGGTACCCCGACACTAGAATGTCTGATGTAACAAGTTCACATTACTCCTTCCGCGCTATGTGTAACGACTAGAATATTATA', 'GAAACAGCGAAAGCTTAAAACAGGGTACCATTAGAGATGACACGCACCGCGAGTGGTACGATGAATGCTCATAGATTCGGACTCACTGTGCTCA', 'ATAGCAGAAATAACCTTAAACGTAGGGACAGTAGCTCGCTTTATAGGGATGCTATGCCATAAAACCCGTCGGGATGGCCTTATAAAAAGCGCGC', 'AAGGGTTGACAACGCTGCTAGCACAGGCTCCATTAATCCGCCAAGGACGCAGGTATGAGGAAGAGCACTCAACGCAGCGGATTGCATTCTAACA', 'ACAGAAGGCGAAAGTATATCTTACCTATCAACTGTGTGTGTGTGATCCGCCTGAAACCAGACTATTAGTACCCTTTTCACGGTTGGTAGTCCGG', 'GAAATTAATTCGATGCTCCCAAGCCGCTTGACACGAGCTCCCAAGCTTTCTAACGTCGACTTCGACTCCCGATGGGCTCACGGTGCCCTTATGA', 'TATGGTCTTATTTTCGCGGATAGCCGGATTCCCGCTAGCAATTCTTGCCGTAGCAGCTGGTTCCCGCGTCCGACGCCGTCTTTGATCTGTTCTC', 'CCCTTACCAAAAAGCTCGCCCCCGGTTTAAGACCGCGAATGACGGTTACTACTTACCAAGGTGATTAGTTTTCTCCCGAAACCTAACACTAGAG', 'ACGTTCCTAATCCGTCGTTCCAGCCTCATGATATTCCCGGATTGATCGCACAGGAAGGTGTAGTGGCGTAAGCACTATCCCGAGTCTTATTACC', 'AAGCGCGTTGGATGCAGTCCGACCTATATGCGCGCGATTTTGACACTTATGAATACACAGAGAATGCCAACGCCCGCGGCAGATCGTGTCTTCC', 'CCAAATTAGCCATATGAATATGAGTGATGCATAAACGCCGCCTCGCTGCCCCTTGCTGTACGGAATGATGTTCAAGGAATCCGAGAGAATGCAC', 'ACGTAGAAGGGTTAAACCTTAATTCATGCACGAAGCCGTGGGGTATCCGCACACGTTCTCGTCCCTATCGCCGTATTCGATTTGCCATAACATA', 'GTTCTTTGCGATATGATTGCCGTGTATCGATCTAGGCCCTTCCGCAGTACGGCCGAGGCGGATTTCCTTGGCACTTAAACGTCCCTCGCATGGT', 'TGGAAGGCCTCGGCAGTCCTTCATCTAAGGACAGTGAAAGGCTTACGTGATCGCAACATCCAGTAAGATAATGTCAATAGCCAACTAAAGCATC', 'GCATGGACAATCAAGCTCCTGCGGTCGACTGCTCAGACTCGTATGTGCTTCGGCTATATTTATCAAAGACTGACGGTAAACCCTGTAGCTAGTC', 'CGGTATAAGGGCATCATGCAGAGAGCAATGGACATCCGGTTGGAAGACCACGGTACGAAGATCTCACGTCAGACTCGTGAATCCTGTACCGGAA', 'CTCCTGCAATGCTTGTCGTCTAAAGAGAATGTAGCGGACTCCGTAAGCCCTATCACCTTTTAGCGGCCAATTCTCCCGGTTCGTGCCCAGGAGG', 'TTCCGAGTCACGAGGATCTGCGGCCTGAAAGGTTTATGTGTGTTAGGCTGTACAGCGGCCGATCGTCTAGTTTTCAATCTCGCGTAAGCGTCTC']
pattern = 'CTACGG'

print(DistanceBetweenPatternAndStrings(pattern, Dna))
